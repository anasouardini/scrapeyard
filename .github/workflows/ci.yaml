name: "CI"
on:
  push:
    branches:
      - "main"
env:
  CI: true
  PNPM_CACHE_FOLDER: .pnpm-store

jobs:
  test-dev-setup:
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest ]
        node_version: [21]

    name: "runner (dev setup): node-${{ matrix.node_version }}, ${{ matrix.os }}"
    steps:
      - name: Get job name
        run: |
          echo "Job name is $GITHUB_JOB"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 21

      - name: install pnpm
        run: npm i pnpm@latest -g

      - name: setup pnpm config
        run: pnpm config set store-dir $PNPM_CACHE_FOLDER

      - name: install dependencies
        run: pnpm install

      - name:  ls
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
                tree -L 3
          elif [ "$RUNNER_OS" == "Windows" ]; then
                dir -la . || exit 0
          elif [ "$RUNNER_OS" == "macOS" ]; then
                ls -la
          fi
        shell: bash

      - name: Run CI
        run: pnpm run ci
  test-creat-command:
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest ]
        node_version: [21]

    name: "runner (create command): node-${{ matrix.node_version }}, ${{ matrix.os }}"
    steps:
      - name: Get job name
        run: |
          echo "Job name is $GITHUB_JOB"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 21

      - name: install pnpm
        run: npm i pnpm@latest -g

      - name: setup pnpm config
        run: pnpm config set store-dir $PNPM_CACHE_FOLDER

      - name: initialize a scrapeyard project
        run: npm create scrapeyard@latest project-name

      - name:  ls
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
                tree -L 3
          elif [ "$RUNNER_OS" == "Windows" ]; then
                dir -la . || exit 0
          elif [ "$RUNNER_OS" == "macOS" ]; then
                ls -la
          fi
        shell: bash
    